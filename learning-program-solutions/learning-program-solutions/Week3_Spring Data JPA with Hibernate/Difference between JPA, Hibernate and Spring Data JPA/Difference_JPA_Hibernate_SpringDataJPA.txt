When we develop Java applications that need to work with a database, we want to avoid writing long and nasty SQL queries all over our code. Instead we utilize ORM, Object-Relational Mapping, which allows us to map Java classes to database tables.

That is where JPA, Hibernate, and Spring Data JPA come in. Let's break it down very simply:

JPA (Java Persistence API)- The Rules
* It is just a specification. Think of it as an interface for ORM, to tell it how it should work.  
* It does not have its own implementation.
* It tells you to use `@Entity`, `@Id`, `@OneToMany`, etc.
* Provided by: `javax.persistence` & `jakarta.persistence`

Hibernate - The Worker 
* Hibernate is a *popular implementation of JPA*.
* It brings more features on top of JPA like caching, lazy loading, etc.
* We can use Hibernate directly (with XML or annotations), & as the JPA provider.  
		
Spring Data JPA - The Smart Assistant 
* Spring Data JPA sits on top of JPA and Hibernate and makes our lives even easier.
* You do not have to write SQL or JPQL for basic queries like `findAll()` or `save()`.
* All you have to do is extend `JpaRepository` and that's it! 
* Less boilerplate code and more logic! 
The hierarchy is:
Spring Data JPA → uses JPA → implemented by Hibernate